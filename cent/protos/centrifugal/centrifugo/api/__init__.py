# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cent/protos/apiproto.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib.server


if TYPE_CHECKING:
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class CommandMethodType(betterproto.Enum):
    PUBLISH = 0
    BROADCAST = 1
    UNSUBSCRIBE = 2
    DISCONNECT = 3
    PRESENCE = 4
    PRESENCE_STATS = 5
    HISTORY = 6
    HISTORY_REMOVE = 7
    CHANNELS = 8
    INFO = 9
    RPC = 10
    SUBSCRIBE = 11
    REFRESH = 12
    CONNECTIONS = 14
    UPDATE_USER_STATUS = 15
    GET_USER_STATUS = 16
    DELETE_USER_STATUS = 17
    BLOCK_USER = 18
    UNBLOCK_USER = 19
    REVOKE_TOKEN = 20
    INVALIDATE_USER_TOKENS = 21
    DEVICE_REGISTER = 22
    DEVICE_UPDATE = 23
    DEVICE_REMOVE = 24
    DEVICE_LIST = 25
    DEVICE_TOPIC_LIST = 26
    DEVICE_TOPIC_UPDATE = 27
    USER_TOPIC_LIST = 28
    USER_TOPIC_UPDATE = 29
    SEND_PUSH_NOTIFICATION = 30
    UPDATE_PUSH_STATUS = 31
    CANCEL_PUSH = 32
    RATE_LIMIT = 47


@dataclass(eq=False, repr=False)
class Command(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    method: "CommandMethodType" = betterproto.enum_field(2)
    params: bytes = betterproto.bytes_field(3)
    publish: "PublishRequest" = betterproto.message_field(4)
    broadcast: "BroadcastRequest" = betterproto.message_field(5)
    subscribe: "SubscribeRequest" = betterproto.message_field(6)
    unsubscribe: "UnsubscribeRequest" = betterproto.message_field(7)
    disconnect: "DisconnectRequest" = betterproto.message_field(8)
    presence: "PresenceRequest" = betterproto.message_field(9)
    presence_stats: "PresenceStatsRequest" = betterproto.message_field(10)
    history: "HistoryRequest" = betterproto.message_field(11)
    history_remove: "HistoryRemoveRequest" = betterproto.message_field(12)
    info: "InfoRequest" = betterproto.message_field(13)
    rpc: "RpcRequest" = betterproto.message_field(14)
    refresh: "RefreshRequest" = betterproto.message_field(15)
    channels: "ChannelsRequest" = betterproto.message_field(16)
    connections: "ConnectionsRequest" = betterproto.message_field(17)
    update_user_status: "UpdateUserStatusRequest" = betterproto.message_field(18)
    get_user_status: "GetUserStatusRequest" = betterproto.message_field(19)
    delete_user_status: "DeleteUserStatusRequest" = betterproto.message_field(20)
    block_user: "BlockUserRequest" = betterproto.message_field(21)
    unblock_user: "UnblockUserRequest" = betterproto.message_field(22)
    revoke_token: "RevokeTokenRequest" = betterproto.message_field(23)
    invalidate_user_tokens: "InvalidateUserTokensRequest" = betterproto.message_field(24)
    device_register: "DeviceRegisterRequest" = betterproto.message_field(25)
    device_update: "DeviceUpdateRequest" = betterproto.message_field(26)
    device_remove: "DeviceRemoveRequest" = betterproto.message_field(27)
    device_list: "DeviceListRequest" = betterproto.message_field(28)
    device_topic_list: "DeviceTopicListRequest" = betterproto.message_field(29)
    device_topic_update: "DeviceTopicUpdateRequest" = betterproto.message_field(30)
    user_topic_list: "UserTopicListRequest" = betterproto.message_field(31)
    user_topic_update: "UserTopicUpdateRequest" = betterproto.message_field(32)
    send_push_notification: "SendPushNotificationRequest" = betterproto.message_field(33)
    update_push_status: "UpdatePushStatusRequest" = betterproto.message_field(34)
    cancel_push: "CancelPushRequest" = betterproto.message_field(35)
    rate_limit: "RateLimitRequest" = betterproto.message_field(50)


@dataclass(eq=False, repr=False)
class Error(betterproto.Message):
    code: int = betterproto.uint32_field(1)
    message: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class Reply(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    error: "Error" = betterproto.message_field(2)
    result: bytes = betterproto.bytes_field(3)
    publish: "PublishResult" = betterproto.message_field(4)
    broadcast: "BroadcastResult" = betterproto.message_field(5)
    subscribe: "SubscribeResult" = betterproto.message_field(6)
    unsubscribe: "UnsubscribeResult" = betterproto.message_field(7)
    disconnect: "DisconnectResult" = betterproto.message_field(8)
    presence: "PresenceResult" = betterproto.message_field(9)
    presence_stats: "PresenceStatsResult" = betterproto.message_field(10)
    history: "HistoryResult" = betterproto.message_field(11)
    history_remove: "HistoryRemoveResult" = betterproto.message_field(12)
    info: "InfoResult" = betterproto.message_field(13)
    rpc: "RpcResult" = betterproto.message_field(14)
    refresh: "RefreshResult" = betterproto.message_field(15)
    channels: "ChannelsResult" = betterproto.message_field(16)
    connections: "ConnectionsResult" = betterproto.message_field(17)
    update_user_status: "UpdateUserStatusResult" = betterproto.message_field(18)
    get_user_status: "GetUserStatusResult" = betterproto.message_field(19)
    delete_user_status: "DeleteUserStatusResult" = betterproto.message_field(20)
    block_user: "BlockUserResult" = betterproto.message_field(21)
    unblock_user: "UnblockUserResult" = betterproto.message_field(22)
    revoke_token: "RevokeTokenResult" = betterproto.message_field(23)
    invalidate_user_tokens: "InvalidateUserTokensResult" = betterproto.message_field(24)
    device_register: "DeviceRegisterResult" = betterproto.message_field(25)
    device_update: "DeviceUpdateResult" = betterproto.message_field(26)
    device_remove: "DeviceRemoveResult" = betterproto.message_field(27)
    device_list: "DeviceListResult" = betterproto.message_field(28)
    device_topic_list: "DeviceTopicListResult" = betterproto.message_field(29)
    device_topic_update: "DeviceTopicUpdateResult" = betterproto.message_field(30)
    user_topic_list: "UserTopicListResult" = betterproto.message_field(31)
    user_topic_update: "UserTopicUpdateResult" = betterproto.message_field(32)
    send_push_notification: "SendPushNotificationResult" = betterproto.message_field(33)
    update_push_status: "UpdatePushStatusResult" = betterproto.message_field(34)
    cancel_push: "CancelPushResult" = betterproto.message_field(35)
    rate_limit: "RateLimitResult" = betterproto.message_field(50)


@dataclass(eq=False, repr=False)
class BoolValue(betterproto.Message):
    value: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class Int32Value(betterproto.Message):
    value: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class SubscribeOptionOverride(betterproto.Message):
    presence: "BoolValue" = betterproto.message_field(1)
    join_leave: "BoolValue" = betterproto.message_field(2)
    force_recovery: "BoolValue" = betterproto.message_field(3)
    force_positioning: "BoolValue" = betterproto.message_field(4)
    force_push_join_leave: "BoolValue" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class BatchRequest(betterproto.Message):
    commands: List["Command"] = betterproto.message_field(1)
    parallel: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class BatchResponse(betterproto.Message):
    replies: List["Reply"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PublishRequest(betterproto.Message):
    channel: str = betterproto.string_field(1)
    data: bytes = betterproto.bytes_field(2)
    b64_data: str = betterproto.string_field(3)
    skip_history: bool = betterproto.bool_field(4)
    tags: Dict[str, str] = betterproto.map_field(
        5, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    idempotency_key: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class PublishResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "PublishResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PublishResult(betterproto.Message):
    offset: int = betterproto.uint64_field(1)
    epoch: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class BroadcastRequest(betterproto.Message):
    channels: List[str] = betterproto.string_field(1)
    data: bytes = betterproto.bytes_field(2)
    b64_data: str = betterproto.string_field(3)
    skip_history: bool = betterproto.bool_field(4)
    tags: Dict[str, str] = betterproto.map_field(
        5, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    idempotency_key: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class BroadcastResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "BroadcastResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class BroadcastResult(betterproto.Message):
    responses: List["PublishResponse"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SubscribeRequest(betterproto.Message):
    channel: str = betterproto.string_field(1)
    user: str = betterproto.string_field(2)
    expire_at: int = betterproto.int64_field(3)
    info: bytes = betterproto.bytes_field(4)
    b64_info: str = betterproto.string_field(5)
    client: str = betterproto.string_field(6)
    data: bytes = betterproto.bytes_field(7)
    b64_data: str = betterproto.string_field(8)
    recover_since: "StreamPosition" = betterproto.message_field(9)
    override: "SubscribeOptionOverride" = betterproto.message_field(10)
    session: str = betterproto.string_field(11)


@dataclass(eq=False, repr=False)
class SubscribeResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "SubscribeResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SubscribeResult(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class UnsubscribeRequest(betterproto.Message):
    channel: str = betterproto.string_field(1)
    user: str = betterproto.string_field(2)
    client: str = betterproto.string_field(3)
    session: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class UnsubscribeResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "UnsubscribeResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class UnsubscribeResult(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class Disconnect(betterproto.Message):
    code: int = betterproto.uint32_field(1)
    reason: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class DisconnectRequest(betterproto.Message):
    user: str = betterproto.string_field(1)
    disconnect: "Disconnect" = betterproto.message_field(2)
    client: str = betterproto.string_field(3)
    whitelist: List[str] = betterproto.string_field(4)
    session: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class DisconnectResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "DisconnectResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class DisconnectResult(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class PresenceRequest(betterproto.Message):
    channel: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class PresenceResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "PresenceResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ClientInfo(betterproto.Message):
    user: str = betterproto.string_field(1)
    client: str = betterproto.string_field(2)
    conn_info: bytes = betterproto.bytes_field(3)
    chan_info: bytes = betterproto.bytes_field(4)


@dataclass(eq=False, repr=False)
class PresenceResult(betterproto.Message):
    presence: Dict[str, "ClientInfo"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class PresenceStatsRequest(betterproto.Message):
    channel: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class PresenceStatsResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "PresenceStatsResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PresenceStatsResult(betterproto.Message):
    num_clients: int = betterproto.uint32_field(1)
    num_users: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class StreamPosition(betterproto.Message):
    offset: int = betterproto.uint64_field(1)
    epoch: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class HistoryRequest(betterproto.Message):
    channel: str = betterproto.string_field(1)
    limit: int = betterproto.int32_field(2)
    since: "StreamPosition" = betterproto.message_field(3)
    reverse: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class HistoryResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "HistoryResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class Publication(betterproto.Message):
    data: bytes = betterproto.bytes_field(2)
    """Removed: string uid = 1;"""

    info: "ClientInfo" = betterproto.message_field(3)
    offset: int = betterproto.uint64_field(4)
    tags: Dict[str, str] = betterproto.map_field(
        5, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass(eq=False, repr=False)
class HistoryResult(betterproto.Message):
    publications: List["Publication"] = betterproto.message_field(1)
    epoch: str = betterproto.string_field(2)
    offset: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class HistoryRemoveRequest(betterproto.Message):
    channel: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class HistoryRemoveResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "HistoryRemoveResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HistoryRemoveResult(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class InfoRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class InfoResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "InfoResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class InfoResult(betterproto.Message):
    nodes: List["NodeResult"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RpcRequest(betterproto.Message):
    method: str = betterproto.string_field(1)
    params: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class RpcResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "RpcResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class RpcResult(betterproto.Message):
    data: bytes = betterproto.bytes_field(1)


@dataclass(eq=False, repr=False)
class RefreshRequest(betterproto.Message):
    user: str = betterproto.string_field(1)
    client: str = betterproto.string_field(2)
    expired: bool = betterproto.bool_field(3)
    expire_at: int = betterproto.int64_field(4)
    info: bytes = betterproto.bytes_field(5)
    session: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class RefreshResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "RefreshResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class RefreshResult(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class NodeResult(betterproto.Message):
    uid: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    version: str = betterproto.string_field(3)
    num_clients: int = betterproto.uint32_field(4)
    num_users: int = betterproto.uint32_field(5)
    num_channels: int = betterproto.uint32_field(6)
    uptime: int = betterproto.uint32_field(7)
    metrics: "Metrics" = betterproto.message_field(8)
    process: "Process" = betterproto.message_field(9)
    num_subs: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class Metrics(betterproto.Message):
    interval: float = betterproto.double_field(1)
    items: Dict[str, float] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_DOUBLE
    )


@dataclass(eq=False, repr=False)
class Process(betterproto.Message):
    cpu: float = betterproto.double_field(1)
    rss: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class ChannelsRequest(betterproto.Message):
    pattern: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ChannelsResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "ChannelsResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ChannelsResult(betterproto.Message):
    channels: Dict[str, "ChannelInfo"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class ChannelInfo(betterproto.Message):
    num_clients: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ConnectionsRequest(betterproto.Message):
    user: str = betterproto.string_field(1)
    expression: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ConnectionsResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "ConnectionsResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ConnectionsResult(betterproto.Message):
    connections: Dict[str, "ConnectionInfo"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class ConnectionInfo(betterproto.Message):
    app_name: str = betterproto.string_field(1)
    app_version: str = betterproto.string_field(2)
    transport: str = betterproto.string_field(3)
    protocol: str = betterproto.string_field(4)
    user: str = betterproto.string_field(8)
    """5-7 dropped for backwards compatibility."""

    state: "ConnectionState" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class ConnectionState(betterproto.Message):
    channels: Dict[str, "ChannelContext"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    connection_token: "ConnectionTokenInfo" = betterproto.message_field(2)
    subscription_tokens: Dict[str, "SubscriptionTokenInfo"] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    meta: bytes = betterproto.bytes_field(4)


@dataclass(eq=False, repr=False)
class ChannelContext(betterproto.Message):
    source: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ConnectionTokenInfo(betterproto.Message):
    uid: str = betterproto.string_field(1)
    issued_at: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class SubscriptionTokenInfo(betterproto.Message):
    uid: str = betterproto.string_field(1)
    issued_at: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class UpdateUserStatusRequest(betterproto.Message):
    users: List[str] = betterproto.string_field(1)
    state: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class UpdateUserStatusResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "UpdateUserStatusResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class UpdateUserStatusResult(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetUserStatusRequest(betterproto.Message):
    users: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetUserStatusResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "GetUserStatusResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetUserStatusResult(betterproto.Message):
    statuses: List["UserStatus"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class UserStatus(betterproto.Message):
    user: str = betterproto.string_field(1)
    active: int = betterproto.int64_field(2)
    online: int = betterproto.int64_field(3)
    state: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class DeleteUserStatusRequest(betterproto.Message):
    users: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DeleteUserStatusResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "DeleteUserStatusResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class DeleteUserStatusResult(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class BlockUserRequest(betterproto.Message):
    expire_at: int = betterproto.int64_field(1)
    user: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class BlockUserResult(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class BlockUserResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "BlockUserResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class UnblockUserRequest(betterproto.Message):
    user: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class UnblockUserResult(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class UnblockUserResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "UnblockUserResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class RevokeTokenRequest(betterproto.Message):
    expire_at: int = betterproto.int64_field(1)
    uid: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class RevokeTokenResult(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RevokeTokenResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "RevokeTokenResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class InvalidateUserTokensRequest(betterproto.Message):
    expire_at: int = betterproto.int64_field(1)
    user: str = betterproto.string_field(2)
    issued_before: int = betterproto.int64_field(3)
    channel: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class InvalidateUserTokensResult(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class InvalidateUserTokensResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "InvalidateUserTokensResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class DeviceRegisterRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    provider: str = betterproto.string_field(2)
    token: str = betterproto.string_field(3)
    platform: str = betterproto.string_field(4)
    user: str = betterproto.string_field(5)
    meta: Dict[str, str] = betterproto.map_field(
        6, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    topics: List[str] = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class DeviceUpdateRequest(betterproto.Message):
    ids: List[str] = betterproto.string_field(1)
    users: List[str] = betterproto.string_field(2)
    user_update: "DeviceUserUpdate" = betterproto.message_field(4)
    meta_update: "DeviceMetaUpdate" = betterproto.message_field(5)
    topics_update: "DeviceTopicsUpdate" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class DeviceRemoveRequest(betterproto.Message):
    ids: List[str] = betterproto.string_field(1)
    users: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class DeviceUserUpdate(betterproto.Message):
    user: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DeviceMetaUpdate(betterproto.Message):
    meta: Dict[str, str] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass(eq=False, repr=False)
class DeviceTopicsUpdate(betterproto.Message):
    op: str = betterproto.string_field(1)
    topics: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class DeviceFilter(betterproto.Message):
    ids: List[str] = betterproto.string_field(1)
    users: List[str] = betterproto.string_field(2)
    topics: List[str] = betterproto.string_field(3)
    providers: List[str] = betterproto.string_field(4)
    platforms: List[str] = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class DeviceListRequest(betterproto.Message):
    filter: "DeviceFilter" = betterproto.message_field(1)
    include_total_count: bool = betterproto.bool_field(2)
    include_meta: bool = betterproto.bool_field(3)
    include_topics: bool = betterproto.bool_field(4)
    cursor: str = betterproto.string_field(10)
    limit: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class DeviceTopicFilter(betterproto.Message):
    device_ids: List[str] = betterproto.string_field(1)
    device_providers: List[str] = betterproto.string_field(2)
    device_platforms: List[str] = betterproto.string_field(3)
    device_users: List[str] = betterproto.string_field(4)
    topics: List[str] = betterproto.string_field(5)
    topic_prefix: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class DeviceTopicListRequest(betterproto.Message):
    filter: "DeviceTopicFilter" = betterproto.message_field(1)
    include_total_count: bool = betterproto.bool_field(2)
    include_device: bool = betterproto.bool_field(3)
    cursor: str = betterproto.string_field(10)
    limit: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class UserTopicFilter(betterproto.Message):
    users: List[str] = betterproto.string_field(1)
    topics: List[str] = betterproto.string_field(2)
    topic_prefix: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class UserTopicListRequest(betterproto.Message):
    filter: "UserTopicFilter" = betterproto.message_field(1)
    include_total_count: bool = betterproto.bool_field(2)
    cursor: str = betterproto.string_field(10)
    limit: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class DeviceTopicUpdateRequest(betterproto.Message):
    device_id: str = betterproto.string_field(1)
    op: str = betterproto.string_field(2)
    topics: List[str] = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class UserTopicUpdateRequest(betterproto.Message):
    user: str = betterproto.string_field(1)
    op: str = betterproto.string_field(2)
    topics: List[str] = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class DeviceRegisterResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "DeviceRegisterResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class DeviceUpdateResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "DeviceUpdateResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class DeviceRemoveResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "DeviceRemoveResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class DeviceListResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "DeviceListResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class DeviceTopicListResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "DeviceTopicListResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class UserTopicListResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "UserTopicListResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class DeviceTopicUpdateResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "DeviceTopicUpdateResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class UserTopicUpdateResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "UserTopicUpdateResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class DeviceRegisterResult(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DeviceUpdateResult(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class DeviceRemoveResult(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class DeviceListResult(betterproto.Message):
    items: List["Device"] = betterproto.message_field(1)
    next_cursor: str = betterproto.string_field(2)
    total_count: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class Device(betterproto.Message):
    id: str = betterproto.string_field(1)
    platform: str = betterproto.string_field(2)
    provider: str = betterproto.string_field(3)
    token: str = betterproto.string_field(4)
    user: str = betterproto.string_field(5)
    created_at: int = betterproto.int64_field(6)
    updated_at: int = betterproto.int64_field(7)
    meta: Dict[str, str] = betterproto.map_field(
        10, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    topics: List[str] = betterproto.string_field(11)


@dataclass(eq=False, repr=False)
class DeviceTopicListResult(betterproto.Message):
    items: List["DeviceTopic"] = betterproto.message_field(1)
    next_cursor: str = betterproto.string_field(2)
    total_count: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class DeviceTopic(betterproto.Message):
    id: str = betterproto.string_field(1)
    topic: str = betterproto.string_field(2)
    device: "Device" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class UserTopicListResult(betterproto.Message):
    items: List["UserTopic"] = betterproto.message_field(1)
    next_cursor: str = betterproto.string_field(2)
    total_count: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class DeviceTopicUpdateResult(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class UserTopicUpdateResult(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class UserTopic(betterproto.Message):
    id: str = betterproto.string_field(1)
    user: str = betterproto.string_field(2)
    topic: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class PushRecipient(betterproto.Message):
    filter: "DeviceFilter" = betterproto.message_field(1)
    fcm_tokens: List[str] = betterproto.string_field(2)
    fcm_topic: str = betterproto.string_field(3)
    fcm_condition: str = betterproto.string_field(4)
    hms_tokens: List[str] = betterproto.string_field(5)
    hms_topic: str = betterproto.string_field(6)
    hms_condition: str = betterproto.string_field(7)
    apns_tokens: List[str] = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class PushNotification(betterproto.Message):
    fcm: "FcmPushNotification" = betterproto.message_field(1)
    hms: "HmsPushNotification" = betterproto.message_field(2)
    apns: "ApnsPushNotification" = betterproto.message_field(3)
    expire_at: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class FcmPushNotification(betterproto.Message):
    message: bytes = betterproto.bytes_field(1)


@dataclass(eq=False, repr=False)
class HmsPushNotification(betterproto.Message):
    message: bytes = betterproto.bytes_field(1)


@dataclass(eq=False, repr=False)
class ApnsPushNotification(betterproto.Message):
    headers: Dict[str, str] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    payload: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class SendPushNotificationRequest(betterproto.Message):
    recipient: "PushRecipient" = betterproto.message_field(1)
    notification: "PushNotification" = betterproto.message_field(2)
    uid: str = betterproto.string_field(3)
    send_at: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class SendPushNotificationResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "SendPushNotificationResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SendPushNotificationResult(betterproto.Message):
    uid: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class UpdatePushStatusRequest(betterproto.Message):
    uid: str = betterproto.string_field(1)
    status: str = betterproto.string_field(2)
    device_id: str = betterproto.string_field(3)
    msg_id: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class UpdatePushStatusResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "UpdatePushStatusResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class UpdatePushStatusResult(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CancelPushRequest(betterproto.Message):
    uid: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CancelPushResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "CancelPushResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CancelPushResult(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RateLimitRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RateLimitResponse(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: "RateLimitResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class RateLimitResult(betterproto.Message):
    pass


class CentrifugoApiStub(betterproto.ServiceStub):
    async def batch(
        self,
        batch_request: "BatchRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "BatchResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/Batch",
            batch_request,
            BatchResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def publish(
        self,
        publish_request: "PublishRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "PublishResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/Publish",
            publish_request,
            PublishResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def broadcast(
        self,
        broadcast_request: "BroadcastRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "BroadcastResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/Broadcast",
            broadcast_request,
            BroadcastResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def subscribe(
        self,
        subscribe_request: "SubscribeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "SubscribeResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/Subscribe",
            subscribe_request,
            SubscribeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def unsubscribe(
        self,
        unsubscribe_request: "UnsubscribeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "UnsubscribeResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/Unsubscribe",
            unsubscribe_request,
            UnsubscribeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def disconnect(
        self,
        disconnect_request: "DisconnectRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "DisconnectResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/Disconnect",
            disconnect_request,
            DisconnectResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def presence(
        self,
        presence_request: "PresenceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "PresenceResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/Presence",
            presence_request,
            PresenceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def presence_stats(
        self,
        presence_stats_request: "PresenceStatsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "PresenceStatsResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/PresenceStats",
            presence_stats_request,
            PresenceStatsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def history(
        self,
        history_request: "HistoryRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "HistoryResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/History",
            history_request,
            HistoryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def history_remove(
        self,
        history_remove_request: "HistoryRemoveRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "HistoryRemoveResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/HistoryRemove",
            history_remove_request,
            HistoryRemoveResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def info(
        self,
        info_request: "InfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "InfoResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/Info",
            info_request,
            InfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def rpc(
        self,
        rpc_request: "RpcRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "RpcResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/RPC",
            rpc_request,
            RpcResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def refresh(
        self,
        refresh_request: "RefreshRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "RefreshResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/Refresh",
            refresh_request,
            RefreshResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def channels(
        self,
        channels_request: "ChannelsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ChannelsResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/Channels",
            channels_request,
            ChannelsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def connections(
        self,
        connections_request: "ConnectionsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ConnectionsResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/Connections",
            connections_request,
            ConnectionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_user_status(
        self,
        update_user_status_request: "UpdateUserStatusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "UpdateUserStatusResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/UpdateUserStatus",
            update_user_status_request,
            UpdateUserStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_user_status(
        self,
        get_user_status_request: "GetUserStatusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "GetUserStatusResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/GetUserStatus",
            get_user_status_request,
            GetUserStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_user_status(
        self,
        delete_user_status_request: "DeleteUserStatusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "DeleteUserStatusResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/DeleteUserStatus",
            delete_user_status_request,
            DeleteUserStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def block_user(
        self,
        block_user_request: "BlockUserRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "BlockUserResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/BlockUser",
            block_user_request,
            BlockUserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def unblock_user(
        self,
        unblock_user_request: "UnblockUserRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "UnblockUserResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/UnblockUser",
            unblock_user_request,
            UnblockUserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def revoke_token(
        self,
        revoke_token_request: "RevokeTokenRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "RevokeTokenResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/RevokeToken",
            revoke_token_request,
            RevokeTokenResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def invalidate_user_tokens(
        self,
        invalidate_user_tokens_request: "InvalidateUserTokensRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "InvalidateUserTokensResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/InvalidateUserTokens",
            invalidate_user_tokens_request,
            InvalidateUserTokensResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def device_register(
        self,
        device_register_request: "DeviceRegisterRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "DeviceRegisterResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/DeviceRegister",
            device_register_request,
            DeviceRegisterResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def device_update(
        self,
        device_update_request: "DeviceUpdateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "DeviceUpdateResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/DeviceUpdate",
            device_update_request,
            DeviceUpdateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def device_remove(
        self,
        device_remove_request: "DeviceRemoveRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "DeviceRemoveResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/DeviceRemove",
            device_remove_request,
            DeviceRemoveResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def device_list(
        self,
        device_list_request: "DeviceListRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "DeviceListResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/DeviceList",
            device_list_request,
            DeviceListResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def device_topic_list(
        self,
        device_topic_list_request: "DeviceTopicListRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "DeviceTopicListResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/DeviceTopicList",
            device_topic_list_request,
            DeviceTopicListResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def device_topic_update(
        self,
        device_topic_update_request: "DeviceTopicUpdateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "DeviceTopicUpdateResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/DeviceTopicUpdate",
            device_topic_update_request,
            DeviceTopicUpdateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def user_topic_list(
        self,
        user_topic_list_request: "UserTopicListRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "UserTopicListResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/UserTopicList",
            user_topic_list_request,
            UserTopicListResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def user_topic_update(
        self,
        user_topic_update_request: "UserTopicUpdateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "UserTopicUpdateResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/UserTopicUpdate",
            user_topic_update_request,
            UserTopicUpdateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def send_push_notification(
        self,
        send_push_notification_request: "SendPushNotificationRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "SendPushNotificationResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/SendPushNotification",
            send_push_notification_request,
            SendPushNotificationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_push_status(
        self,
        update_push_status_request: "UpdatePushStatusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "UpdatePushStatusResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/UpdatePushStatus",
            update_push_status_request,
            UpdatePushStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_push(
        self,
        cancel_push_request: "CancelPushRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "CancelPushResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/CancelPush",
            cancel_push_request,
            CancelPushResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def rate_limit(
        self,
        rate_limit_request: "RateLimitRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "RateLimitResponse":
        return await self._unary_unary(
            "/centrifugal.centrifugo.api.CentrifugoApi/RateLimit",
            rate_limit_request,
            RateLimitResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class CentrifugoApiBase(ServiceBase):
    async def batch(self, batch_request: "BatchRequest") -> "BatchResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def publish(self, publish_request: "PublishRequest") -> "PublishResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def broadcast(self, broadcast_request: "BroadcastRequest") -> "BroadcastResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def subscribe(self, subscribe_request: "SubscribeRequest") -> "SubscribeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def unsubscribe(
        self, unsubscribe_request: "UnsubscribeRequest"
    ) -> "UnsubscribeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def disconnect(self, disconnect_request: "DisconnectRequest") -> "DisconnectResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def presence(self, presence_request: "PresenceRequest") -> "PresenceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def presence_stats(
        self, presence_stats_request: "PresenceStatsRequest"
    ) -> "PresenceStatsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def history(self, history_request: "HistoryRequest") -> "HistoryResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def history_remove(
        self, history_remove_request: "HistoryRemoveRequest"
    ) -> "HistoryRemoveResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def info(self, info_request: "InfoRequest") -> "InfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def rpc(self, rpc_request: "RpcRequest") -> "RpcResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def refresh(self, refresh_request: "RefreshRequest") -> "RefreshResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def channels(self, channels_request: "ChannelsRequest") -> "ChannelsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def connections(
        self, connections_request: "ConnectionsRequest"
    ) -> "ConnectionsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_user_status(
        self, update_user_status_request: "UpdateUserStatusRequest"
    ) -> "UpdateUserStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_user_status(
        self, get_user_status_request: "GetUserStatusRequest"
    ) -> "GetUserStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_user_status(
        self, delete_user_status_request: "DeleteUserStatusRequest"
    ) -> "DeleteUserStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def block_user(self, block_user_request: "BlockUserRequest") -> "BlockUserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def unblock_user(
        self, unblock_user_request: "UnblockUserRequest"
    ) -> "UnblockUserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def revoke_token(
        self, revoke_token_request: "RevokeTokenRequest"
    ) -> "RevokeTokenResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def invalidate_user_tokens(
        self, invalidate_user_tokens_request: "InvalidateUserTokensRequest"
    ) -> "InvalidateUserTokensResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def device_register(
        self, device_register_request: "DeviceRegisterRequest"
    ) -> "DeviceRegisterResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def device_update(
        self, device_update_request: "DeviceUpdateRequest"
    ) -> "DeviceUpdateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def device_remove(
        self, device_remove_request: "DeviceRemoveRequest"
    ) -> "DeviceRemoveResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def device_list(self, device_list_request: "DeviceListRequest") -> "DeviceListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def device_topic_list(
        self, device_topic_list_request: "DeviceTopicListRequest"
    ) -> "DeviceTopicListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def device_topic_update(
        self, device_topic_update_request: "DeviceTopicUpdateRequest"
    ) -> "DeviceTopicUpdateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def user_topic_list(
        self, user_topic_list_request: "UserTopicListRequest"
    ) -> "UserTopicListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def user_topic_update(
        self, user_topic_update_request: "UserTopicUpdateRequest"
    ) -> "UserTopicUpdateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def send_push_notification(
        self, send_push_notification_request: "SendPushNotificationRequest"
    ) -> "SendPushNotificationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_push_status(
        self, update_push_status_request: "UpdatePushStatusRequest"
    ) -> "UpdatePushStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def cancel_push(self, cancel_push_request: "CancelPushRequest") -> "CancelPushResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def rate_limit(self, rate_limit_request: "RateLimitRequest") -> "RateLimitResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_batch(
        self, stream: "grpclib.server.Stream[BatchRequest, BatchResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.batch(request)
        await stream.send_message(response)

    async def __rpc_publish(
        self, stream: "grpclib.server.Stream[PublishRequest, PublishResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.publish(request)
        await stream.send_message(response)

    async def __rpc_broadcast(
        self, stream: "grpclib.server.Stream[BroadcastRequest, BroadcastResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.broadcast(request)
        await stream.send_message(response)

    async def __rpc_subscribe(
        self, stream: "grpclib.server.Stream[SubscribeRequest, SubscribeResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.subscribe(request)
        await stream.send_message(response)

    async def __rpc_unsubscribe(
        self, stream: "grpclib.server.Stream[UnsubscribeRequest, UnsubscribeResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.unsubscribe(request)
        await stream.send_message(response)

    async def __rpc_disconnect(
        self, stream: "grpclib.server.Stream[DisconnectRequest, DisconnectResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.disconnect(request)
        await stream.send_message(response)

    async def __rpc_presence(
        self, stream: "grpclib.server.Stream[PresenceRequest, PresenceResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.presence(request)
        await stream.send_message(response)

    async def __rpc_presence_stats(
        self,
        stream: "grpclib.server.Stream[PresenceStatsRequest, PresenceStatsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.presence_stats(request)
        await stream.send_message(response)

    async def __rpc_history(
        self, stream: "grpclib.server.Stream[HistoryRequest, HistoryResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.history(request)
        await stream.send_message(response)

    async def __rpc_history_remove(
        self,
        stream: "grpclib.server.Stream[HistoryRemoveRequest, HistoryRemoveResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.history_remove(request)
        await stream.send_message(response)

    async def __rpc_info(self, stream: "grpclib.server.Stream[InfoRequest, InfoResponse]") -> None:
        request = await stream.recv_message()
        response = await self.info(request)
        await stream.send_message(response)

    async def __rpc_rpc(self, stream: "grpclib.server.Stream[RpcRequest, RpcResponse]") -> None:
        request = await stream.recv_message()
        response = await self.rpc(request)
        await stream.send_message(response)

    async def __rpc_refresh(
        self, stream: "grpclib.server.Stream[RefreshRequest, RefreshResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.refresh(request)
        await stream.send_message(response)

    async def __rpc_channels(
        self, stream: "grpclib.server.Stream[ChannelsRequest, ChannelsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.channels(request)
        await stream.send_message(response)

    async def __rpc_connections(
        self, stream: "grpclib.server.Stream[ConnectionsRequest, ConnectionsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.connections(request)
        await stream.send_message(response)

    async def __rpc_update_user_status(
        self,
        stream: "grpclib.server.Stream[UpdateUserStatusRequest, UpdateUserStatusResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_user_status(request)
        await stream.send_message(response)

    async def __rpc_get_user_status(
        self,
        stream: "grpclib.server.Stream[GetUserStatusRequest, GetUserStatusResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_user_status(request)
        await stream.send_message(response)

    async def __rpc_delete_user_status(
        self,
        stream: "grpclib.server.Stream[DeleteUserStatusRequest, DeleteUserStatusResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_user_status(request)
        await stream.send_message(response)

    async def __rpc_block_user(
        self, stream: "grpclib.server.Stream[BlockUserRequest, BlockUserResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.block_user(request)
        await stream.send_message(response)

    async def __rpc_unblock_user(
        self, stream: "grpclib.server.Stream[UnblockUserRequest, UnblockUserResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.unblock_user(request)
        await stream.send_message(response)

    async def __rpc_revoke_token(
        self, stream: "grpclib.server.Stream[RevokeTokenRequest, RevokeTokenResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.revoke_token(request)
        await stream.send_message(response)

    async def __rpc_invalidate_user_tokens(
        self,
        stream: "grpclib.server.Stream[InvalidateUserTokensRequest, InvalidateUserTokensResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.invalidate_user_tokens(request)
        await stream.send_message(response)

    async def __rpc_device_register(
        self,
        stream: "grpclib.server.Stream[DeviceRegisterRequest, DeviceRegisterResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.device_register(request)
        await stream.send_message(response)

    async def __rpc_device_update(
        self, stream: "grpclib.server.Stream[DeviceUpdateRequest, DeviceUpdateResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.device_update(request)
        await stream.send_message(response)

    async def __rpc_device_remove(
        self, stream: "grpclib.server.Stream[DeviceRemoveRequest, DeviceRemoveResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.device_remove(request)
        await stream.send_message(response)

    async def __rpc_device_list(
        self, stream: "grpclib.server.Stream[DeviceListRequest, DeviceListResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.device_list(request)
        await stream.send_message(response)

    async def __rpc_device_topic_list(
        self,
        stream: "grpclib.server.Stream[DeviceTopicListRequest, DeviceTopicListResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.device_topic_list(request)
        await stream.send_message(response)

    async def __rpc_device_topic_update(
        self,
        stream: "grpclib.server.Stream[DeviceTopicUpdateRequest, DeviceTopicUpdateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.device_topic_update(request)
        await stream.send_message(response)

    async def __rpc_user_topic_list(
        self,
        stream: "grpclib.server.Stream[UserTopicListRequest, UserTopicListResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.user_topic_list(request)
        await stream.send_message(response)

    async def __rpc_user_topic_update(
        self,
        stream: "grpclib.server.Stream[UserTopicUpdateRequest, UserTopicUpdateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.user_topic_update(request)
        await stream.send_message(response)

    async def __rpc_send_push_notification(
        self,
        stream: "grpclib.server.Stream[SendPushNotificationRequest, SendPushNotificationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.send_push_notification(request)
        await stream.send_message(response)

    async def __rpc_update_push_status(
        self,
        stream: "grpclib.server.Stream[UpdatePushStatusRequest, UpdatePushStatusResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_push_status(request)
        await stream.send_message(response)

    async def __rpc_cancel_push(
        self, stream: "grpclib.server.Stream[CancelPushRequest, CancelPushResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.cancel_push(request)
        await stream.send_message(response)

    async def __rpc_rate_limit(
        self, stream: "grpclib.server.Stream[RateLimitRequest, RateLimitResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.rate_limit(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/centrifugal.centrifugo.api.CentrifugoApi/Batch": grpclib.const.Handler(
                self.__rpc_batch,
                grpclib.const.Cardinality.UNARY_UNARY,
                BatchRequest,
                BatchResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/Publish": grpclib.const.Handler(
                self.__rpc_publish,
                grpclib.const.Cardinality.UNARY_UNARY,
                PublishRequest,
                PublishResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/Broadcast": grpclib.const.Handler(
                self.__rpc_broadcast,
                grpclib.const.Cardinality.UNARY_UNARY,
                BroadcastRequest,
                BroadcastResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/Subscribe": grpclib.const.Handler(
                self.__rpc_subscribe,
                grpclib.const.Cardinality.UNARY_UNARY,
                SubscribeRequest,
                SubscribeResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/Unsubscribe": grpclib.const.Handler(
                self.__rpc_unsubscribe,
                grpclib.const.Cardinality.UNARY_UNARY,
                UnsubscribeRequest,
                UnsubscribeResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/Disconnect": grpclib.const.Handler(
                self.__rpc_disconnect,
                grpclib.const.Cardinality.UNARY_UNARY,
                DisconnectRequest,
                DisconnectResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/Presence": grpclib.const.Handler(
                self.__rpc_presence,
                grpclib.const.Cardinality.UNARY_UNARY,
                PresenceRequest,
                PresenceResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/PresenceStats": grpclib.const.Handler(
                self.__rpc_presence_stats,
                grpclib.const.Cardinality.UNARY_UNARY,
                PresenceStatsRequest,
                PresenceStatsResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/History": grpclib.const.Handler(
                self.__rpc_history,
                grpclib.const.Cardinality.UNARY_UNARY,
                HistoryRequest,
                HistoryResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/HistoryRemove": grpclib.const.Handler(
                self.__rpc_history_remove,
                grpclib.const.Cardinality.UNARY_UNARY,
                HistoryRemoveRequest,
                HistoryRemoveResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/Info": grpclib.const.Handler(
                self.__rpc_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                InfoRequest,
                InfoResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/RPC": grpclib.const.Handler(
                self.__rpc_rpc,
                grpclib.const.Cardinality.UNARY_UNARY,
                RpcRequest,
                RpcResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/Refresh": grpclib.const.Handler(
                self.__rpc_refresh,
                grpclib.const.Cardinality.UNARY_UNARY,
                RefreshRequest,
                RefreshResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/Channels": grpclib.const.Handler(
                self.__rpc_channels,
                grpclib.const.Cardinality.UNARY_UNARY,
                ChannelsRequest,
                ChannelsResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/Connections": grpclib.const.Handler(
                self.__rpc_connections,
                grpclib.const.Cardinality.UNARY_UNARY,
                ConnectionsRequest,
                ConnectionsResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/UpdateUserStatus": grpclib.const.Handler(
                self.__rpc_update_user_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateUserStatusRequest,
                UpdateUserStatusResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/GetUserStatus": grpclib.const.Handler(
                self.__rpc_get_user_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetUserStatusRequest,
                GetUserStatusResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/DeleteUserStatus": grpclib.const.Handler(
                self.__rpc_delete_user_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteUserStatusRequest,
                DeleteUserStatusResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/BlockUser": grpclib.const.Handler(
                self.__rpc_block_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                BlockUserRequest,
                BlockUserResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/UnblockUser": grpclib.const.Handler(
                self.__rpc_unblock_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                UnblockUserRequest,
                UnblockUserResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/RevokeToken": grpclib.const.Handler(
                self.__rpc_revoke_token,
                grpclib.const.Cardinality.UNARY_UNARY,
                RevokeTokenRequest,
                RevokeTokenResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/InvalidateUserTokens": grpclib.const.Handler(
                self.__rpc_invalidate_user_tokens,
                grpclib.const.Cardinality.UNARY_UNARY,
                InvalidateUserTokensRequest,
                InvalidateUserTokensResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/DeviceRegister": grpclib.const.Handler(
                self.__rpc_device_register,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeviceRegisterRequest,
                DeviceRegisterResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/DeviceUpdate": grpclib.const.Handler(
                self.__rpc_device_update,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeviceUpdateRequest,
                DeviceUpdateResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/DeviceRemove": grpclib.const.Handler(
                self.__rpc_device_remove,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeviceRemoveRequest,
                DeviceRemoveResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/DeviceList": grpclib.const.Handler(
                self.__rpc_device_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeviceListRequest,
                DeviceListResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/DeviceTopicList": grpclib.const.Handler(
                self.__rpc_device_topic_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeviceTopicListRequest,
                DeviceTopicListResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/DeviceTopicUpdate": grpclib.const.Handler(
                self.__rpc_device_topic_update,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeviceTopicUpdateRequest,
                DeviceTopicUpdateResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/UserTopicList": grpclib.const.Handler(
                self.__rpc_user_topic_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                UserTopicListRequest,
                UserTopicListResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/UserTopicUpdate": grpclib.const.Handler(
                self.__rpc_user_topic_update,
                grpclib.const.Cardinality.UNARY_UNARY,
                UserTopicUpdateRequest,
                UserTopicUpdateResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/SendPushNotification": grpclib.const.Handler(
                self.__rpc_send_push_notification,
                grpclib.const.Cardinality.UNARY_UNARY,
                SendPushNotificationRequest,
                SendPushNotificationResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/UpdatePushStatus": grpclib.const.Handler(
                self.__rpc_update_push_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdatePushStatusRequest,
                UpdatePushStatusResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/CancelPush": grpclib.const.Handler(
                self.__rpc_cancel_push,
                grpclib.const.Cardinality.UNARY_UNARY,
                CancelPushRequest,
                CancelPushResponse,
            ),
            "/centrifugal.centrifugo.api.CentrifugoApi/RateLimit": grpclib.const.Handler(
                self.__rpc_rate_limit,
                grpclib.const.Cardinality.UNARY_UNARY,
                RateLimitRequest,
                RateLimitResponse,
            ),
        }
